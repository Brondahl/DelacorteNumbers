using System;

namespace DelacorteNumbers.Calculations
{
    public static class SquareDistance
    {
        public static int FromPoints(GridPoint pointA, GridPoint pointB)
        {
            var xOffset = Math.Abs(pointA.X - pointB.X);
            var yOffset = Math.Abs(pointA.Y - pointB.Y);
            return FromOffsets(xOffset, yOffset);
        }

        public static int FromOffsets(int x, int y)
        {
            return Table[x][y];
        }

        private static readonly int[][] Table =
        {
            new[]
            {
                0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625
            },
            new[]
            {
                1, 2, 5, 10, 17, 26, 37, 50, 65, 82, 101, 122, 145, 170, 197, 226, 257, 290, 325, 362, 401, 442, 485, 530, 577, 626
            },
            new[]
            {
                4, 5, 8, 13, 20, 29, 40, 53, 68, 85, 104, 125, 148, 173, 200, 229, 260, 293, 328, 365, 404, 445, 488, 533, 580, 629
            },
            new[]
            {
                9, 10, 13, 18, 25, 34, 45, 58, 73, 90, 109, 130, 153, 178, 205, 234, 265, 298, 333, 370, 409, 450, 493, 538, 585, 634
            },
            new[]
            {
                16, 17, 20, 25, 32, 41, 52, 65, 80, 97, 116, 137, 160, 185, 212, 241, 272, 305, 340, 377, 416, 457, 500, 545, 592, 641
            },
            new[]
            {
                25, 26, 29, 34, 41, 50, 61, 74, 89, 106, 125, 146, 169, 194, 221, 250, 281, 314, 349, 386, 425, 466, 509, 554, 601, 650
            },
            new[]
            {
                36, 37, 40, 45, 52, 61, 72, 85, 100, 117, 136, 157, 180, 205, 232, 261, 292, 325, 360, 397, 436, 477, 520, 565, 612, 661
            },
            new[]
            {
                49, 50, 53, 58, 65, 74, 85, 98, 113, 130, 149, 170, 193, 218, 245, 274, 305, 338, 373, 410, 449, 490, 533, 578, 625, 674
            },
            new[]
            {
                64, 65, 68, 73, 80, 89, 100, 113, 128, 145, 164, 185, 208, 233, 260, 289, 320, 353, 388, 425, 464, 505, 548, 593, 640, 689
            },
            new[]
            {
                81, 82, 85, 90, 97, 106, 117, 130, 145, 162, 181, 202, 225, 250, 277, 306, 337, 370, 405, 442, 481, 522, 565, 610, 657, 706
            },
            new[]
            {
                100, 101, 104, 109, 116, 125, 136, 149, 164, 181, 200, 221, 244, 269, 296, 325, 356, 389, 424, 461, 500, 541, 584, 629, 676, 725
            },
            new[]
            {
                121, 122, 125, 130, 137, 146, 157, 170, 185, 202, 221, 242, 265, 290, 317, 346, 377, 410, 445, 482, 521, 562, 605, 650, 697, 746
            },
            new[]
            {
                144, 145, 148, 153, 160, 169, 180, 193, 208, 225, 244, 265, 288, 313, 340, 369, 400, 433, 468, 505, 544, 585, 628, 673, 720, 769
            },
            new[]
            {
                169, 170, 173, 178, 185, 194, 205, 218, 233, 250, 269, 290, 313, 338, 365, 394, 425, 458, 493, 530, 569, 610, 653, 698, 745, 794
            },
            new[]
            {
                196, 197, 200, 205, 212, 221, 232, 245, 260, 277, 296, 317, 340, 365, 392, 421, 452, 485, 520, 557, 596, 637, 680, 725, 772, 821
            },
            new[]
            {
                225, 226, 229, 234, 241, 250, 261, 274, 289, 306, 325, 346, 369, 394, 421, 450, 481, 514, 549, 586, 625, 666, 709, 754, 801, 850
            },
            new[]
            {
                256, 257, 260, 265, 272, 281, 292, 305, 320, 337, 356, 377, 400, 425, 452, 481, 512, 545, 580, 617, 656, 697, 740, 785, 832, 881
            },
            new[]
            { 
                289, 290, 293, 298, 305, 314, 325, 338, 353, 370, 389, 410, 433, 458, 485, 514, 545, 578, 613, 650, 689, 730, 773, 818, 865, 914
            },
            new[]
            {
                324, 325, 328, 333, 340, 349, 360, 373, 388, 405, 424, 445, 468, 493, 520, 549, 580, 613, 648, 685, 724, 765, 808, 853, 900, 949
            },
            new[]
            {
                361, 362, 365, 370, 377, 386, 397, 410, 425, 442, 461, 482, 505, 530, 557, 586, 617, 650, 685, 722, 761, 802, 845, 890, 937, 986
            },
            new[]
            {
                400, 401, 404, 409, 416, 425, 436, 449, 464, 481, 500, 521, 544, 569, 596, 625, 656, 689, 724, 761, 800, 841, 884, 929, 976, 1025
            },
            new[]
            {
                441, 442, 445, 450, 457, 466, 477, 490, 505, 522, 541, 562, 585, 610, 637, 666, 697, 730, 765, 802, 841, 882, 925, 970, 1017, 1066
            },
            new[]
            {
                484, 485, 488, 493, 500, 509, 520, 533, 548, 565, 584, 605, 628, 653, 680, 709, 740, 773, 808, 845, 884, 925, 968, 1013, 1060, 1109
            },
            new[]
            {
                529, 530, 533, 538, 545, 554, 565, 578, 593, 610, 629, 650, 673, 698, 725, 754, 785, 818, 853, 890, 929, 970, 1013, 1058, 1105, 1154
            },
            new[]
            {
                576, 577, 580, 585, 592, 601, 612, 625, 640, 657, 676, 697, 720, 745, 772, 801, 832, 865, 900, 937, 976, 1017, 1060, 1105, 1152, 1201
            },
            new[]
            {
                625, 626, 629, 634, 641, 650, 661, 674, 689, 706, 725, 746, 769, 794, 821, 850, 881, 914, 949, 986, 1025, 1066, 1109, 1154, 1201, 1250
            },
        };
    }
}